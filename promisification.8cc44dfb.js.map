{"mappings":"YA8CA,MAIMA,EAAmBC,GAEhB,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,GAPyBC,EAOS,IAPJC,EAOS,IANxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EASpCI,YAAW,KACQH,KAAKE,SAAW,GAGjCP,EAAQ,CAACS,GAAGX,EAAYW,GAAIC,KAAKR,IAEjCD,EAAOH,EAAYW,GAAG,GAEvBP,EAAM,IAKLS,EAAa,EAACF,GAACA,EAAEC,KAAEA,MACvBE,QAAQC,IAAI,eAAeJ,kBAAmBC,MAAS,EAGnDI,EAAWL,IACfG,QAAQG,KAAK,gCAAgCN,6BAA8B,EAa7EZ,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,E","sources":["src/promisification.js"],"sourcesContent":["///////////////////////// Задание 1\n// const delay = ms => {\n//   return new Promise(resolve =>  \n//     resolve(ms)\n//    );\n// };\n\n// const logger = time => console.log(`Resolved after ${time}ms`);\n\n// // Вызовы функции для проверки\n// delay(2000).then(logger); // Resolved after 2000ms\n// delay(1000).then(logger); // Resolved after 1000ms\n// delay(1500).then(logger); // Resolved after 1500ms\n\n// /////////////////////////////Задание 2\n// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: true },\n//   { name: 'Lux', active: false },\n// ];\n\n// //переключить состояние пользователя\n// const toggleUserState = (allUsers, userName, callback) => {  \n//   //обновленные пользователи\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   return new Promise(resolve=>{ resolve(updatedUsers)}) //////////вместо callback функции\n// };\n// //регистратор\n// const logger = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// // toggleUserState(users, 'Mango', logger);\n// // toggleUserState(users, 'Lux', logger);\n\n// /*\n//  * Должно работать так\n//  */\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      resolve({id:transaction.id, time:delay});\n    } else {\n      reject(transaction.id);\n    }\n  }, delay);\n  })\n  \n};\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"names":["$99ca53caabd46d74$var$makeTransaction","transaction","Promise","resolve","reject","delay","min","max","Math","floor","random","setTimeout","id","time","$99ca53caabd46d74$var$logSuccess","console","log","$99ca53caabd46d74$var$logError","warn","amount","then","catch"],"version":3,"file":"promisification.8cc44dfb.js.map"}